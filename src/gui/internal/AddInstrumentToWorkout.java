package gui.internal;

import gui.iWindow;
import Validators.CharValidator;
import Validators.EmailValidator;
import Validators.PhoneValidator;
import Validators.PositiveValidator;
import core.Branch;
import core.Customer;
import core.Instrument;
import core.Lesson;
import core.Practice;
import core.Room;
import core.Subscription;
import core.Workout;
import java.awt.Color;
import java.awt.Component;
import utils.E_Cities;
import java.lang.*;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Map;
import javafx.beans.binding.Bindings;
import javax.swing.JCheckBox;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import utils.E_Lessons;
import utils.E_Rooms;
import utils.E_Types;

/**
 *
 * @author nisans
 */
public class AddInstrumentToWorkout extends javax.swing.JInternalFrame {
    
    private Customer customer;
    private Instrument instrument;
    private Branch branch;
    /**
     * Creates new form NewJInternalFrame
     */
    
    public AddInstrumentToWorkout(Customer cust) {
        initComponents();

        this.customer = cust;
        lblCustomerID.setVisible(true);
        lblCustomerID.setText(customer.getId());
        insType.setVisible(true);
        lblInstrumentType.setVisible(false);
        
        insPanel.hide();
        //Finished Loading
        selectRoom.hide();
        lblSelectRoom.hide();
        for(Subscription sub : customer.getSubs()){
            for(Workout wrk : sub.getWorkouts()){
                selectWorkout.addItem(wrk.getNumber()+"");
            }
        }
        
        iWindow.update();
    
    }
    
    /**
     * Adds instrument to workout specific constructor
     * Given the params, will update the form accordinely
     * @param cust
     * @param ins
     * @param workoutNum 
     */
    public AddInstrumentToWorkout(Customer cust, Instrument ins, int workoutNum) {
        initComponents();

        setTitle("Customer -> Add Intrument to Workout");
        this.customer = cust;
        this.instrument = ins;
        this.type = ins.getType();
        this.workoutNum = workoutNum;

        //set customer's id field
        lblCustomerID.setVisible(true);
        lblCustomerID.setText(customer.getId());
        insType.setVisible(false);
        lblWorkoutNum.setText(""+workoutNum);
        selectWorkout.hide();
        lblInstrumentType.setVisible(true);
        lblInstrumentType.setText(ins.getType().toString());
        
         selectRoom.hide();
        lblSelectRoom.hide();
        
        //show date of workout
        int d = iWindow.getDB().getWorkouts().get(workoutNum).getDate().getDate();
        int m = iWindow.getDB().getWorkouts().get(workoutNum).getDate().getMonth();
        int y =  iWindow.getDB().getWorkouts().get(workoutNum).getDate().getYear();
        
        start = new Date(y, m, d);
        String strDate = new SimpleDateFormat("dd/MM/yyyy").format(start);
        dateLabel.setText(strDate);
        updateTable();
        //Finished Loading
        iWindow.update();
    
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Connect = new javax.swing.JButton();
        selectWorkout = new javax.swing.JComboBox<>();
        custError = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        MessageBox = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblWorkoutNum = new javax.swing.JLabel();
        details = new javax.swing.JLabel();
        DateError = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblSelectRoom = new javax.swing.JLabel();
        selectRoom = new javax.swing.JComboBox<>();
        lblCustomerID = new javax.swing.JLabel();
        insPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        insType = new javax.swing.JComboBox<>();
        Second = new javax.swing.JComboBox<>();
        Minute = new javax.swing.JComboBox<>();
        Hour = new javax.swing.JComboBox<>();
        duration = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lblInstrumentType = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblList = new javax.swing.JLabel();

        setBackground(new Color(0,0,0,85));
        setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.white));
        setIconifiable(true);
        setMaximizable(true);
        setAutoscrolls(true);
        setFrameIcon(null);
        setInheritsPopupMenu(true);
        setMaximumSize(new java.awt.Dimension(600, 600));
        setMinimumSize(new java.awt.Dimension(600, 600));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(600, 600));
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFocusLost(evt);
            }
        });
        getContentPane().setLayout(null);

        Connect.setBackground(new java.awt.Color(102, 102, 102));
        Connect.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Connect.setForeground(new java.awt.Color(255, 255, 255));
        Connect.setText("Add Instrument");
        Connect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ConnectMouseClicked(evt);
            }
        });
        getContentPane().add(Connect);
        Connect.setBounds(540, 210, 150, 23);

        selectWorkout.setBackground(new Color(0,0,0));
        selectWorkout.setForeground(new java.awt.Color(255, 255, 255));
        selectWorkout.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Workout" }));
        selectWorkout.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                selectWorkoutFocusLost(evt);
            }
        });
        selectWorkout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectWorkoutActionPerformed(evt);
            }
        });
        getContentPane().add(selectWorkout);
        selectWorkout.setBounds(160, 40, 190, 22);

        custError.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        custError.setForeground(new java.awt.Color(255, 0, 0));
        getContentPane().add(custError);
        custError.setBounds(370, 10, 290, 20);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Select Workout");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(30, 40, 110, 20);

        MessageBox.setBackground(new Color (0,0,0,90));
        MessageBox.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        MessageBox.setForeground(new java.awt.Color(0, 255, 0));
        getContentPane().add(MessageBox);
        MessageBox.setBounds(30, 210, 430, 20);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Customer ID");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(30, 10, 110, 20);

        lblWorkoutNum.setForeground(new java.awt.Color(255, 255, 255));
        lblWorkoutNum.setText("jLabel1");
        getContentPane().add(lblWorkoutNum);
        lblWorkoutNum.setBounds(160, 40, 170, 20);

        details.setBackground(new Color(0,0,0,90));
        details.setForeground(new java.awt.Color(51, 255, 0));
        getContentPane().add(details);
        details.setBounds(370, 40, 330, 20);

        DateError.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        DateError.setForeground(new java.awt.Color(255, 0, 0));
        getContentPane().add(DateError);
        DateError.setBounds(370, 130, 250, 20);

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jLabel3);
        jLabel3.setBounds(700, 0, 10, 10);

        lblSelectRoom.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblSelectRoom.setForeground(new java.awt.Color(255, 255, 255));
        lblSelectRoom.setText("Select Room");
        getContentPane().add(lblSelectRoom);
        lblSelectRoom.setBounds(30, 70, 110, 20);

        selectRoom.setBackground(new Color(0,0,0));
        selectRoom.setForeground(new java.awt.Color(255, 255, 255));
        selectRoom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Room" }));
        selectRoom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectRoomItemStateChanged(evt);
            }
        });
        selectRoom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                selectRoomFocusLost(evt);
            }
        });
        selectRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectRoomActionPerformed(evt);
            }
        });
        getContentPane().add(selectRoom);
        selectRoom.setBounds(160, 70, 190, 22);

        lblCustomerID.setForeground(new java.awt.Color(255, 255, 255));
        lblCustomerID.setText("jLabel2");
        getContentPane().add(lblCustomerID);
        lblCustomerID.setBounds(160, 10, 170, 20);

        insPanel.setOpaque(false);
        insPanel.setLayout(null);

        jLabel3.setToolTipText("Subscription Number ");
        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Instrument Type");
        insPanel.add(jLabel14);
        jLabel14.setBounds(30, 70, 140, 20);

        insType.setBackground(new java.awt.Color(0, 0, 0));
        insType.setForeground(new java.awt.Color(255, 255, 255));
        insType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Instrument Type", "CROSS", "CYCLE", "ROWER", "STEPPER", "BENCH", "KETTLEBELLS", "WEIGHTLIFTING_BAR", "POWER_STATION", "ROPE_CLIMBER", "SHOULDER_PRESS", "MATTRESS;" }));
        insType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                insTypeFocusLost(evt);
            }
        });
        insPanel.add(insType);
        insType.setBounds(160, 70, 190, 22);
        insType.removeAllItems();

        Second.setBackground(new java.awt.Color(0, 0, 0));
        Second.setForeground(new java.awt.Color(255, 255, 255));
        Second.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Second", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "18", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "34", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        insPanel.add(Second);
        Second.setBounds(290, 130, 60, 22);

        Minute.setBackground(new java.awt.Color(0, 0, 0));
        Minute.setForeground(new java.awt.Color(255, 255, 255));
        Minute.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Minute", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "18", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "34", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        insPanel.add(Minute);
        Minute.setBounds(220, 130, 60, 22);

        Hour.setBackground(new java.awt.Color(0, 0, 0));
        Hour.setForeground(new java.awt.Color(255, 255, 255));
        Hour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "18", "20", "21", "22", "23" }));
        insPanel.add(Hour);
        Hour.setBounds(160, 130, 50, 22);

        duration.setBackground(new java.awt.Color(0, 0, 0));
        duration.setForeground(new java.awt.Color(255, 255, 255));
        duration.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Duration", "5 min", "10 min", "15 min", "20 min", "25 min", "30 min" }));
        duration.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                durationItemStateChanged(evt);
            }
        });
        insPanel.add(duration);
        duration.setBounds(160, 160, 190, 22);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Duration");
        insPanel.add(jLabel6);
        jLabel6.setBounds(30, 160, 110, 20);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Start Time");
        insPanel.add(jLabel11);
        jLabel11.setBounds(30, 130, 110, 20);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Start Date");
        insPanel.add(jLabel10);
        jLabel10.setBounds(30, 100, 110, 20);

        lblInstrumentType.setForeground(new java.awt.Color(255, 255, 255));
        lblInstrumentType.setText("jLabel1");
        insPanel.add(lblInstrumentType);
        lblInstrumentType.setBounds(160, 70, 190, 20);

        dateLabel.setForeground(new java.awt.Color(255, 255, 255));
        insPanel.add(dateLabel);
        dateLabel.setBounds(160, 100, 190, 20);

        getContentPane().add(insPanel);
        insPanel.setBounds(0, 0, 430, 350);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Select Workout");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(30, 40, 110, 20);

        lblList.setForeground(new java.awt.Color(255, 255, 255));
        lblList.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblList.setMaximumSize(new java.awt.Dimension(530, 360));
        getContentPane().add(lblList);
        lblList.setBounds(20, 290, 530, 360);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void ConnectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ConnectMouseClicked
        //Create the date
        if (Hour.getSelectedIndex() !=0 && Minute.getSelectedIndex() !=0 && Second.getSelectedIndex() !=0) {
            
            int d = iWindow.getDB().getWorkouts().get(workoutNum).getDate().getDate();
            int m = iWindow.getDB().getWorkouts().get(workoutNum).getDate().getMonth();
            int y =  iWindow.getDB().getWorkouts().get(workoutNum).getDate().getYear();
            int h = Hour.getSelectedIndex()-1;
            int min = Minute.getSelectedIndex()-1;
            int s = Second.getSelectedIndex()-1;
            
            start = new Date(y, m, d, h,min,s);
            String strDate = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss").format(start);
            dateLabel.setText(strDate);
            
            Date workdate = iWindow.getDB().getWorkouts().get(this.workoutNum).getDate();
            if (new Date().before(start) && start.getYear() == workdate.getYear()
                    && start.getMonth() == workdate.getMonth() && start.getDate() == workdate.getDate()){
                DateError.setForeground(Color.GREEN);
                DateError.setText("Date: " + start);
                iWindow.update();
            }
            else{
                start = null;
                DateError.setForeground(Color.red);
                DateError.setText("Invalid date or time");
                iWindow.update();
                return;
            }
        }
        else{
            start = null;
            DateError.setForeground(Color.red);
            DateError.setText("Invalid date, time or duration");
            iWindow.update();
            return;
        }
        if(instrument==null) return;
        //I brought an instrument with me
        roomNum = instrument.getRoom().getRoomNum();
        branchNum = instrument.getRoom().getBranch().getBranchNumber();        

        //add to ishape
        //System.out.println(workoutNum + " " + branchNum + " " + roomNum + " " + start + " " + minutes);
        if (iWindow.getDB().addInstrumentToWorkout(workoutNum,branchNum, roomNum, instrument.getType(), start, minutes)){
            MessageBox.setForeground(Color.GREEN);
            MessageBox.setText("Instrument " + type + " was added successfully to workout " + workoutNum);
            iWindow.log(new Date().toString() + " - Instrument " + type + " was added successfully to workout " + workoutNum);
            iWindow.exportData();
            
        }
        else{
            MessageBox.setForeground(Color.RED);
            MessageBox.setText("Instrument " + type + " was failed to be added to workout " + workoutNum);
            iWindow.log(new Date().toString() + " - Instrument " + type + " was failed to be added to workout " + workoutNum);
        }
        
        details.setText(iWindow.getDB().getWorkouts().get(workoutNum).toString2()); 
        iWindow.update();
        
    }//GEN-LAST:event_ConnectMouseClicked
    
    /**
     * This method updates the JTable with instruments' training times
     */
    private void updateTable(){
        
        /**
         * In case there was a problem sending the instrument
         */
        if(this.instrument == null)
            return;
        
        /**
         * If instrument has no practices yet
         */
        if(this.instrument.getOrders().size()==0){
            return;
        }
   
        int counter=1;
        int row = this.instrument.getOrders().size();
        int col = 4;
        
        Object tblData[][] = new Object[row][col];
        String lbl = "<html>"
                + "#\tTime\t\tCustomer\tPractice Length<br>";
        
        for(Map.Entry<Practice, Customer> e : this.instrument.getOrders().entrySet()){
 
          
            lbl+=(counter++)+"\t"+e.getKey().getTime()+
                    "\t"+e.getValue().getFirstName()+" "+e.getValue().getLastName().substring(0,1)+"\t"+e.getKey().getTimeInMinute()+" Minutes<br>";
            
          
            
            
        }
        lbl+="</html>";
        lblList.setSize(400,700);
        lbl = lbl.replaceAll("\t", "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
        System.err.println(lbl);
        lblList.setText(lbl);
        
        iWindow.update();
    }
     
    
    private void formFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_formFocusLost
        
    private void selectWorkoutFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selectWorkoutFocusLost
        String str = (String) selectWorkout.getSelectedItem();
        if(str.length()<=0)
            return;
        
        for (int i = 0; i < str.length(); i++){
            if (Character.isDigit(str.charAt(i))) continue;
            else{
                str = str.substring(0, i);
            }
        }
        workoutNum = Integer.parseInt(str);
        details.setText(selectWorkout.getSelectedItem().toString());
        
        //create list of instruments for the selected workout branch
        branchNum = iWindow.getDB().getWorkouts().get(workoutNum).getBranchNum();
        Branch branch = iWindow.getDB().getBranches().get(branchNum);
        ArrayList<E_Types> list = new ArrayList<E_Types>();
        for (Room r:branch.getRooms()){
            if (!r.getRoomType().equals(E_Rooms.GYM)) continue;
            roomNum = r.getRoomNum();
            for (Instrument i:r.getInstruments()){
                if (!list.contains(i.getType()) && i.getStatus() == true) list.add(i.getType());
            }
        }
        //add the list to jbox
        insType.removeAllItems();
        for (E_Types type:list){
            insType.addItem(type.toString());
            //System.err.println(type);
        }
        
        iWindow.update();
    }//GEN-LAST:event_selectWorkoutFocusLost

    private void durationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_durationItemStateChanged
        minutes = duration.getSelectedIndex() * 5;
    }//GEN-LAST:event_durationItemStateChanged

    private void insTypeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_insTypeFocusLost
        type = E_Types.valueOf((String)insType.getSelectedItem());
    }//GEN-LAST:event_insTypeFocusLost

    private void selectWorkoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectWorkoutActionPerformed
        // TODO add your handling code here:
        if(selectWorkout.getSelectedIndex()==0){
            return;
        }
       
         String str = (String) selectWorkout.getSelectedItem();
        if(str.length()<=0)
            return;
        
        for (int i = 0; i < str.length(); i++){
            if (Character.isDigit(str.charAt(i))) continue;
            else{
                str = str.substring(0, i);
            }
        }
        workoutNum = Integer.parseInt(str);
        Workout wrk = iWindow.getDB().getWorkouts().get(workoutNum);
        //selectRoom.removeAllItems();
         selectRoom.removeAllItems();
        selectRoom.addItem("Select Room");
        for(Room g : iWindow.getDB().getBranches().get(wrk.getBranchNum()).getRooms()){
            if(!g.getRoomType().equals(E_Rooms.GYM))
               continue;
            selectRoom.addItem(g.getRoomNum()+"");
            
            
        }

        selectRoom.setVisible(true);
        selectRoom.show();
        lblSelectRoom.show();
        lblSelectRoom.setVisible(true);
        iWindow.update();
    }//GEN-LAST:event_selectWorkoutActionPerformed

    private void selectRoomFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selectRoomFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_selectRoomFocusLost

    private void selectRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectRoomActionPerformed
        // TODO add your handling code here:
        if(selectRoom.getSelectedIndex()<=0)
            return;
       if(selectRoom.getSelectedItem().equals("Select Room"))
            return;
           
       //Aquire Branch
        branchNum = iWindow.getDB().getWorkouts().get(workoutNum).getBranchNum();
        Branch branch = iWindow.getDB().getBranches().get(branchNum);

        //Aquire Room
        int RoomNum = Integer.parseInt((String)selectRoom.getSelectedItem());
       
        //Find room and launch View Room
        for(Room r : branch.getRooms()){
            if(r.getRoomNum()==RoomNum){
                ViewRoom add = new ViewRoom(customer,r, workoutNum);
                iWindow.openWin(add);
                break;
            }
        }
        
        
        
        
        
    
        
    }//GEN-LAST:event_selectRoomActionPerformed

    private void selectRoomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectRoomItemStateChanged
       
        
    }//GEN-LAST:event_selectRoomItemStateChanged
                        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Connect;
    private javax.swing.JLabel DateError;
    private javax.swing.JComboBox<String> Hour;
    private javax.swing.JLabel MessageBox;
    private javax.swing.JComboBox<String> Minute;
    private javax.swing.JComboBox<String> Second;
    private javax.swing.JLabel custError;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel details;
    private javax.swing.JComboBox<String> duration;
    private javax.swing.JPanel insPanel;
    private javax.swing.JComboBox<String> insType;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel lblCustomerID;
    private javax.swing.JLabel lblInstrumentType;
    private javax.swing.JLabel lblList;
    private javax.swing.JLabel lblSelectRoom;
    private javax.swing.JLabel lblWorkoutNum;
    private javax.swing.JComboBox<String> selectRoom;
    private javax.swing.JComboBox<String> selectWorkout;
    // End of variables declaration//GEN-END:variables
    
    //Manual variables declaration

    private Customer cust = null;
    private int workoutNum = -1;
    private int branchNum = -1;
    private Date start = null;
    private int roomNum = -1;
    private E_Types type = null;
    private int minutes = 0;
    
}
